#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright Â© 2012-2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import email
import email.header
import os.path
import re
import shutil

__docformat__ = "restructuredtext en"

length_limit = 90

def main():
    options = _parse_args()

    for filename in options.args:
        with open(filename, "r") as f:
            m = email.message_from_file(f)

        date = email.utils.parsedate(m["Date"])

        parts = []

        parts.append("{year:04d}{month:02d}{day:02d}".format(
            year = date[0],
            month = date[1],
            day = date[2],
        ))

        parts.append("{hour:02d}{minute:02d}".format(
            hour = date[3],
            minute = date[4],
        ))

        parts.append(filename_safe(get_email(m["From"])) if m["From"] is not None else "None")

        # Parse the subject properly.
        raw_header = email.header.decode_header(m["Subject"])
        header = email.header.make_header(raw_header)
        header_str = str(header)
        subject = filename_safe(header_str) if m["subject"] is not None else "None"

        # Trim the subject if it is too long.
        so_far = "-".join(parts)
        if len(so_far) + 4 + len(subject) > length_limit:
            subject = subject[:length_limit - 4 - len(so_far)]

        # Append the subject.
        parts.append(subject.strip())

        new_name = "-".join(parts) + ".eml"

        new_path = os.path.join(os.path.dirname(filename), new_name)

        if new_path != filename:
            print(new_path)

            if not options.dry:
                shutil.move(filename, new_path)

def get_email(sender):
    return email.utils.parseaddr(sender)[1]

def filename_safe(string):
    return ''.join([
        letter for letter in string
        if letter.isalnum()
        or letter in [".", ",", "-", "@", " ", ":"]
    ])

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="Parses the email headers and renames the email according to date, author and subject.")
    parser.add_argument("args", metavar="email file", type=str, nargs="+", help=".eml files that should be parsed and renamed.")
    parser.add_argument("-n", dest="dry", action="store_true", help="Perform a dry run, do not rename.")
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()
